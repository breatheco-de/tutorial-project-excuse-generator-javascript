"use strict";

var _url = _interopRequireDefault(require("url"));

var _sockjsClient = _interopRequireDefault(require("sockjs-client"));

var _reactErrorOverlay = require("react-error-overlay");

var _launchEditorEndpoint = _interopRequireDefault(require("react-dev-utils/launchEditorEndpoint"));

var _formatWebpackMessages = _interopRequireDefault(require("react-dev-utils/formatWebpackMessages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
var connection = new _sockjsClient.default(_url.default.format({
  protocol: window.location.protocol,
  hostname: window.location.hostname,
  port: window.location.port,
  // Hardcoded in WebpackDevServer
  pathname: '/sockjs-node'
}));
(0, _reactErrorOverlay.setEditorHandler)(function (errorLocation) {
  // Keep this sync with errorOverlayMiddleware.js
  fetch(_launchEditorEndpoint.default + '?fileName=' + window.encodeURIComponent(errorLocation.fileName) + '&lineNumber=' + window.encodeURIComponent(errorLocation.lineNumber || 1) + '&colNumber=' + window.encodeURIComponent(errorLocation.colNumber || 1));
});
(0, _reactErrorOverlay.startReportingRuntimeErrors)({
  onError: function onError() {
    if (module.hot) {
      module.hot.addStatusHandler(function (status) {
        if (status === 'apply') {
          window.location.reload();
        }
      });
    }
  }
});

connection.onmessage = function (e) {
  var _JSON$parse = JSON.parse(e.data),
      type = _JSON$parse.type,
      data = _JSON$parse.data;

  switch (type) {
    case 'errors':
      var _formatWebpackMessage = (0, _formatWebpackMessages.default)({
        errors: data,
        warnings: []
      }),
          errors = _formatWebpackMessage.errors;

      (0, _reactErrorOverlay.reportBuildError)(errors[0]);
      break;

    default: // Do nothing.

  }
};